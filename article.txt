Received: 1 August 2018 Revised: 10 October 2018 Accepted: 25 November 2018
DOI: 10.1002/cpe.5101
SPECIAL I S S U E PAPER
Adaptive machine learning-based alarm reduction via edge
computing for distributed intrusion detection systems
YuWang1 WeizhiMeng2 Wenjuan Li2,3 Zhe Liu4 Yang Liu1 Hanxiao Xue1
1School of Computer Science, Guangzhou
University, Guangzhou, China
2Department of Applied Mathematics and
Computer Science, Technical University of
Denmark, Kongens Lyngby, Denmark
3Department of Computer Science, City
University of Hong Kong, Kowloon Tong,
Hong Kong
4Interdisciplinary Centre for Security,
Reliability and Trust, University of
Luxembourg, Luxembourg City, Luxembourg
Correspondence
Weizhi Meng, Department of Applied
Mathematics and Computer Science, Technical
University of Denmark, Kongens Lyngby,
Denmark.
Email: weme@dtu.dk
Funding information
National Natural Science Foundation of China,
Grant/Award Number: 61802080
Summary
To protect assets and resources from being hacked, intrusion detection systems are widely
implemented in organizations around the world. However, false alarms are one challenging issue
for such systems, which would significantly degrade the effectiveness of detection and greatly
increase the burden of analysis. To solve this problem, building an intelligent false alarm filter
using machine learning classifiers is considered as one promising solution, where an appropriate
algorithm can be selected in an adaptive way in order to maintain the filtration accuracy. By
means of cloud computing, the task of adaptive algorithm selection can be offloaded to the
cloud, whereas it could cause communication delay and increase additional burden. In this work,
motivated by the advent of edge computing, we propose a framework to improve the intelligent
false alarm reduction for DIDS based on edge computing devices. Our framework can provide
energy efficiency as the data can be processed at the edge for shorter response time. The
evaluation results demonstrate that our framework can help reduce the workload for the central
server and the delay as compared to the similar studies.
KEYWORDS
distributed system, edge computing, intelligent false alarm filter, intrusion detection, machine
learning
1 INTRODUCTION
With the rapid development of computer networks, intrusions have become a big threat for network security. To mitigate this issue, intrusion
detection systems (IDSs)1,2 are widely implemented worldwide to defend against different kinds of attacks (either host-based attacks or
network-based attacks). Generally, IDSs can be categorized into three types based on their deployment: host-based intrusion detection systems
(HIDSs), network-based intrusion detection systems (NIDSs), and distributed intrusion detection systems (DIDSs). HIDSs are responsible for
detecting anomalies in a local system, NIDSs aim to figure out network threats, and DIDSs can aggregate the information from various IDS agents
to improve the detection performance.
There are three major detection methods for the current IDSs: signature-based detection, anomaly-based detection and hybrid detection. A
signature-based IDS (or called misuse-based IDS)3 discovers an attack by comparing current incoming events with its stored signatures, where a
signature is a kind of descriptions to represent a known attack with some features. An alarm would be generated if an accurate match is identified.
An anomaly-based IDS4 can identify significant deviations by comparing current system or network events with a pre-defined normal profile. An
abnormal event can be detected if the deviation exceeds a pre-determined threshold. A hybrid IDS (eg, see the works of Tombini et al5 and Zhang
and Zulkernine6) can provide a thorough protection by combining both signature-based detection and anomaly-based detection.
Motivation. Current IDSs including signature-based IDSs and anomaly-based IDSs would suffer from the issue of false alarms in real-world
implementation. During the detection process, a large amount of alarms especially false alarms might be generated by an IDS in one day.7 In
particular, the false alarm rate of an anomaly-based IDS is usually much higher than that of a signature-based IDS.8 This is because it is hard for
an anomaly-based IDS to establish an accurate and appropriate normal profile in most cases.9 In such case, false alarm is considered as a key
limiting factor to hinder the further development of intrusion detection.9 To mitigate the above problem, constructing an intelligent false alarm
Concurrency Computat Pract Exper. 2019;e5101. wileyonlinelibrary.com/journal/cpe © 2019 John Wiley & Sons, Ltd. 1 of 12
https://doi.org/10.1002/cpe.5101
2 of 12 WANG ET AL.
filter is a promising solution, which can reduce false alarms and keep filtration accuracy by selecting an appropriate machine learning algorithm in
an adaptive way.10
One issue is that such intelligent system requires some workload for performing the adaptive algorithm selection. With the technology of
cloud computing, it has become feasible to improve the performance of an IDS.11 Cloud providers offer and manage a specific infrastructure,
while cloud users utilize the provided services to accomplish their own tasks. Cloud can provide a set of desirable features such as access
independence, scalability and elasticity, sufficient computing power, etc. It is a big chance to improve the performance of an IDS, especially a
distributed IDS, when deployed in a cloud environment. However, in a distributed system like IoT environment, some applications might require
very short response time, and some might produce a large quantity of data which cause a heavy load for networks. As a result, cloud computing
may be not efficient enough to support these applications (ie, there may be delay for algorithm selection).
Contributions.With the advent of edge computing, there is a chance to mitigate this issue. Edge computing refers to the enabling technologies
allowing computation to be performed at the edge of the network, on downstream data on behalf of cloud services and upstream data on
behalf of IoT services.12,13 In this paper, we thus propose a framework for improving the intelligent false alarm reduction in distributed intrusion
detection using edge computing devices. The contributions of our work can be summarized as below:
• We introduce the process on how to perform intelligent false alarm reduction on the cloud and propose a framework for improving its
performance in distributed intrusion detection systems, through edge computing. The rationale of edge computing is that computing should
happen at the proximity of data sources, which could loose the workload of a cloud server and reduce the communication delay.
• As a study, we conduct an evaluation by comparing our approach with the previous related work. The experimental results indicate that our
approach can greatly reduce the workload for a central server on the cloud and reduce the communication delay for selecting an algorithm.
The remaining parts of this paper are organized as follows. We review related work on distributed and cloud-based intrusion detection in
Section 2. Section 3 introduces the background of intelligent machine learning selection and the architecture of cloud-based intelligent false
alarm filter. Section 4 describes the background of edge computing and presents our proposed framework. Section 5 shows our evaluation and
discusses the results. Section 6 concludes our work with future directions.
2 RELATEDWORK
2.1 Distributed/Collaborative intrusion detection
Collaborative intrusion detection networks (CIDNs) were developed to enhance the performance of single IDSs, which have less information
about the deployed environment. The improvement can be achieved through requesting and collecting useful information from other IDS nodes.
However, such collaborations may be vulnerable to insider attacks. To protect CIDNs against insider threats, designing robust trust-based
mechanisms is one of the promising solutions.
Duma et al14 proposed a P2P-based overlay for intrusion detection (Overlay IDS) that used a trust-aware engine for correlating alerts and an
adaptive scheme formanaging trust. The trust-aware correlation engine is capable of filtering out warnings sent by untrusted or low quality peers
and the adaptive trust management scheme uses past experiences of peers to predict their trustworthiness. Meng et al15 proposed a trust-based
mechanism using Bayesian inference to identify insider attacks for medical smartphone networks. The evaluation validated the effectiveness of
the proposed approach in real scenarios.
To protect CIDNs, Fung and Boutaba16 proposed challenge-based mechanism, in which the trustworthiness of a node depends on the received
answers to the challenges. Firstly, they proposed a kind of HIDS collaboration framework,17 where each HIDS could evaluate the trustworthiness
of others based on its own experience bymeans of a forgetting factor. The forgetting factor aimed to givemore emphasis on the recent experience
of the peer. Then, they improved the built trust management model by using a Dirichlet-based model to measure the level of trustworthiness
among IDS nodes according to their mutual experience.18 This model had strong scalability properties and was robust against common insider
threats. The experimental results proved that the new model could improve robustness and efficiency.
As challenge-based CIDNs can provide many benefits, Li et al19 aimed to improve the performance of challenge-based CIDNs and identified
that different IDS nodes may have different levels of sensitivity in detecting different types of intrusions. Then, they proposed a notion of
intrusion sensitivity, which measures the detection sensitivity of an IDS in detecting different kinds of intrusions. For instance, if a signature-based
IDS node has a larger set of signatures (or rules) in detecting DoS attacks, then it should be considered as more powerful in detecting this kind
of attacks than other nodes (which have relatively fewer related signatures). An intrusion sensitivity-based trust management model20,21 was
then developed for CIDNs through automating the allocation of intrusion sensitivity by using machine learning techniques in practice. A study
was also conducted to investigate the effect of intrusion sensitivity on defending against pollution attacks, in which a group of malicious peers
cooperate together by providing false alert rankings.22 The above experimental results demonstrated that intrusion sensitivity can help decrease
the trust values of malicious nodes more quickly, through emphasizing the impact of expert nodes.
As challenge mechanisms can defend against common attacks well, research has been conducted on advanced attack. Li et al23 designed a
kind of collusion attack, called passive message fingerprint attack (PMFA), which can collect messages and identify normal requests in a passive
WANG ET AL. 3 of 12
way. The experimental results indicated that such attack could enable malicious nodes to send malicious responses to normal requests while
maintaining their trust values. Then, they developed a special case of On-Off attacks, called SOOA,24 which can keep responding normally to
one node while acting abnormally to another node. In the evaluation, their results indicate that SOOA can interfere the effectiveness of trust
computation and alarm aggregation for CIDN nodes.
In recent years, machine learning techniques have been widely applied in network security domain, such as IP traffic identification,25 malware
detection,26 user authentication,27-30 and anomaly detection.31-33 The application of machine learning itself can raise security and privacy issues,
especially in the case of distributed and outsourced learning, which need to be taken care of when deploying in the real-world.34-38
2.2 Cloud-based Intrusion detection
Cloud computing, which refers to both the applications delivered as services over the Internet and the hardware and systems software in the data
centers that provide those services,39 has been applied to many fields (eg, Mobile phones,40 intrusion detection41). In turn, cloud environment
is easily becoming a target for intruders looking for possible vulnerabilities.42,43 For instance, an attacker can use cloud resources maliciously by
impersonating legitimate cloud users. To protect the cloud environment from various attacks, intrusion detection systems have been investigated
in such an environment.
In actual, cloud computing and intrusion detection systems have a great relationship. To better deploy an IDS in a cloud environment,
Roschke et al44 proposed and implemented an extensible IDS management architecture for different kinds of users and different kinds of
requirements. Their management architecture was mainly composed of several sensors and a central management unit. By combining the
virtualization technology and known VM monitor approaches, they indicated that this management system could handle most of VM-based IDSs.
Then, Vieira et al45 proposed a Grid and Cloud Computing Intrusion Detection System (CCCIDS) to detect both network-based and host-based
attacks by employing an audit system with both knowledge and behavior analysis. In particular, each node identified local events that represented
security violations and interacted with other nodes. Similarly, Yassin et al46 developed a Cloud-based Intrusion Detection Service Framework
(CBIDS) to identify malicious activities from different points of network. That is, different layers' traffic would be monitored and only interested
packets would be further analyzed in the CBIDS. In addition, a similar model of CIDS was also proposed by Kholidy and Baiardi47 to solve the
deficiencies of current IDSs.
To address the security issues in a cloud environment, Doelitzscher et al48 proposed an autonomous agent-based incident detection system
with the purpose of solving new cloud specific security issues (ie, the abuse of cloud resources). Specifically, their proposed Security Audit as a
Service (SAaaS) incident detection system was built on intelligent, autonomous agents for collecting data, analyzing information and distributing
underlying business process. Later, Alharkan and Martin41 presented an Intrusion Detection System as a Service (IDSaaS) to enhance the cloud
provider's security infrastructure. The IDSaaS was developed to monitor and log suspicious network behaviors between virtual machines and
within a Virtual Private Cloud (VPC). Several research papers regarding cloud security and IDSs can refer to other works.49-56
It is easily visible that the cloud environment can offer great and sufficient computing resources to an IDS, while an IDS can provide
indispensable protection to safeguard the cloud environment. In this work, we focus on improving the performance of an IDS by means of cloud
computing in the particular fields of adaptive false alarm reduction. Specifically, we propose a cloud-based approach of implementing the adaptive
false alarm reduction based on the CaaS.We further simulated a cloud environment and compared our results with their proposed solution in the
work of Meng et al.57 Further, in this work, we validate this idea in a distributed network environment with more nodes.
3 BACKGROUND
In this section, we first introduce the background of intelligent false alarm filter and then show how to apply it to a cloud environment.
3.1 Intelligent false alarm filter
False alarm reduction is very important to reduce the burden of analysts and improve the detection performance of an IDS. However, the
performance of machine learning classifiers may be fluctuant under different scenarios, eg, datasets. To address this problem, conducting an
intelligent false alarm filter is a promising solution. In our previous work,10 we shown that Snort alarms can be represented with a 8-feature set:
description, classification, priority, packet type, source IP address, source port number, destination IP address and destination port number.
Then, we used three metrics: classification accuracy, precision of false alarm, and recall of false alarm. The classification accuracy indicates the rate
of correctly classifying both false alarms and true alarms, while precision of false alarm and recall of false alarm can be defined as below:
precision of FA = the number of false alarms classified as false alarm
the number of alarms classified as false alarm
(1)
recall of FA = the number of false alarms classified as false alarm
the number of false alarms . (2)
4 of 12 WANG ET AL.
IDS Alarms Alarm Process System
Intrusion Detection System
Machine Learning Algorithm Selection
Cloud as a Service
Control System
True Alarm
Data Standardization
FIGURE 1 The high-level architecture of adaptively reducing false alarms using Cloud as a Service58
Intuitively, a desirable algorithm is expected to have a precision of 1, showing that it does not classify any true alarm as a false alarm, and a recall
of 1 to indicate that it can detect every false alarm correctly. In addition, the decrease of precision (ie, a true alarm is classified as false alarm) is
more harmful than the decrease of recall (ie, a false alarm is classified as true alarm). For alarm reduction, we prefer higher precision of false alarm
than classification accuracy since a higher accuracy of identifying false alarms is very effective to be used to construct a false alarm filter.
3.2 Cloud-based intelligent false alarm reduction
Constructing an intelligent false alarm filter can help choose an efficient machine learning algorithm to conduct false alarm reduction. The
previous work10 showed that by adaptively selecting the most appropriate algorithm, the false alarm filter could achieve good results, whereas
the workload is a concern for real-world implementation. With the computing resources provided by a cloud, it becomes feasible to deploy such
intelligent false alarm filter in a cloud environment, which can reduce false alarms according to specific IP sources.58
Figure 1 depicts the high-level architecture of intelligent false alarm reduction via Cloud as a Service (CaaS), including four major components:
Data Standardization, Machine Learning Algorithm Selection, Control System and Alarm Process System. The component of Data Standardization is
responsible for extracting and converting the incoming IDS alarms into the standard alarms that are represented by using some related alarm
features. For example, we used a 8-feature set to represent a Snort alarm59 including description, classification, priority, packet type, source IP
address, source port number, destination IP address and destination port number.
In particular, the component of Machine Learning Algorithm Selection is used to select the most appropriate machine learning algorithm from
a pool of algorithms by training with a number of labeled alarms. The most appropriate algorithm is denoted as the algorithm with the best
classification rate and precision rate. The Control System is mainly responsible for comparing the performance of different machine learning
algorithms and deciding the most appropriate algorithm used for alarm reduction. The Alarm Process System is mainly responsible for reducing
false alarms based on the selected algorithm and maintaining a scheme-database for different IP sources. With the increase of labeled training
data, the selected algorithm for a specific IP source may be varied. The outputs of the Alarm Process System are considered as true alarms.
When a cloud node requires to reduce false alarms within a cloud, it can send a request to the cloud provider. Then the cloud provider can
send back a feedback and establish a valid connection. When the connection is established, the cloud nodes can send data to the cloud provider.
On the cloud provider's side, we implement a Cloud Manager (CM) as a core component to mange all the other components including Data
Standardization, Machine Learning Algorithm Selection, Control System, and Alarm Process System.
4 OUR APPROACH
This section introduces the background of edge computing and presents our proposed framework for improving intelligent false alarm reduction
through edge computing for DIDSs.
4.1 Edge computing
As mentioned earlier, edge computing refers to the enabling technologies allowing computation to be performed at the edge of the network,
on downstream data on behalf of cloud services and upstream data on behalf of IoT services.12 As compared to fog computing,60 they are
interchangeable, but edge computing focus more toward the things side, while fog computing focuses more on the infrastructure side. An ‘‘edge’’
can be any computing and network resources along the path between data sources and cloud data centers. The rationale of edge computing is
that computing should happen at the proximity of data sources. At the edge, the things can not only request service and content from the cloud
but also perform the computing tasks from the cloud. Edge can perform computing offloading, data storage, caching and processing, as well as
distribute requests and delivery services from the cloud side to the user side.
WANG ET AL. 5 of 12
Edge computing can provide many benefits.61 For example, the edge computing paradigm can be flexibly expanded from a single home
to community, or even city scale. For applications that require predictable and low latency such as health emergency or public safety, edge
computing is an appropriate paradigm since it could save the data transmission time as well as simplify the network structure. Decision and
diagnosis could be made as well as distributed from the edge of the network, which is more efficient compared with collecting information
and making decision at central cloud. For geographic-based applications such as transportation and utility management, edge computing exceed
cloud computing due to the location awareness. That is, in edge computing, data could be collected and processed based on geographic location
without being transported to cloud.
4.2 Our framework
As edge computing can help process the data with a shorter response time, more efficient processing and smaller network pressure, it has a
potential to lighten the burden of deploying intelligent false alarm reduction for distributed intrusion detection systems. Figure 2 describes the
proposed framework that aims to improve the intelligent false alarm filter based on edge (computing) devices. There are three major layers:
• IDS layer (filter layer). This layer performs intrusion detection and false alarm reduction. Different IDS nodes can communicate with each other
to improve their detection performance. The intelligent false alarm filter is also located at this layer, where some expensive operations (eg,
intelligent algorithm selection) could be offloaded to the cloud side (cloud layer).
• Cloud layer. The cloud environment can provide sufficient computation resources for the IDS layer, so that data owners do not need to worry
about the computational burden. However, uploading large amount of data to the cloud side can cause communication burden and cannot
ensure an instant response depending on the geographical locations.
• Edge layer. This layer often embodies software modules and embedded operating systems. This layer is able to collect data from the IDS layer
and perform algorithm selection locally. Local decision making is an important way to reduce latency and thus to improve efficiency in false
alarm reduction.
When the connection is established among IDS nodes, edge devices and cloud environment, an IDS node can send data to the corresponding
edge device for data processing at first and then the edge device forwards the data and results to the cloud's side. For each edge device, an
Edge Manager (EM) is adopted as a core component to manage all communications and handle other components including Data Standardization,
Machine Learning Algorithm Selection, Control System and Alarm Process System. The specific interactions are shown in Table 1.
More specifically, the goal of Phase 1 is to extract alarm features and convert the received data to standard alarms. Then the Edge Manager (EM)
in Phase 2 has to decide whether to conduct the algorithm selection in multi-VM machines or not. The use of multi-VM machines can help speed
up the selection process and decrease the computational burden. Then, the edge manager sends the results to the control system. In Phase 3, the
IDS Layer
(Filter Layer)
Cloud
Edge Layer
Cloud Layer
FIGURE 2 The proposed framework for improving intelligent false alarm filter using edge (computing) devices
6 of 12 WANG ET AL.
TABLE 1 Interactions between the IDS nodes and the edge devices
main purpose is to choose the best algorithm based on the given metrics. The Alarm Process System (APS) reduces false alarms by means of the
selected algorithm and outputs remaining alarms. At last, the edge manager sends back the results to both the IDS nodes and the cloud server
for further investigation.
5 EVALUATION
In this section, we perform an evaluation on the framework performance in two IT networks, which both maintain a collaborative IDS network
including 20 Snort nodes and 54 Snort nodes, respectively.
5.1 Experimental settings
As mentioned above, Snort alarms can be extracted and represented by means of 8-feature set (description, classification, priority, packet type,
source IP address, source port number, destination IP address, and destination port number). During the algorithm training, all the features will be
marked with their appearance possibility to ensure the correct operations of algorithms. Similar to the work of Meng et al,58 the algorithm pool
contains seven specificmachine learning algorithms: ZeroR, KNN (IBK), SVM(LibSVM), NaiveBayes, NN (RBFNetwork), DT (J48), and DT (RandomTree).
All the algorithms were extracted from theWEKA platform,62 which provides a set of algorithms, in order to avoid implementation bias. We used
two measures in deciding the performance of algorithms as below:
Classification accuracy = N1
N2
, (3)
Precision of false alarm = N3
N4
, (4)
where N1 represents the number of correctly classified alarms, N2 represents the total number of alarms, N3 represents the number of alarms
classified as false alarm, N4 represents the number of false alarms. Ideally, a desirable algorithm is expected to have a classification accuracy of 1
and a precision of false alarm of 1, but there is a balance should be considered in practical deployment. Similar to the studies of Meng et al,10,58
we define a decision value to determine the best algorithm. The calculation is described as below:
decision value = 0.4 × CA + 0.6 × PFA (5)
where CA represents the classification accuracy and PFA represents the precision of false alarm.
WANG ET AL. 7 of 12
5.2 Experiment-1
In this experiment, we randomly selected six IDS nodes and collected a real five-day alarm dataset from the deployed distributed IDS network. A
node could generate around 5400 alarms on average each day. All alarms were labeled by expert knowledge with three network administrators
from the same company.
Algorithm selection. Table 2 presents the algorithm selection process for different IDS nodes (six nodes) and days (five days). It is noticeable
that the algorithm selection performs in an intelligent way, in which the best algorithm could be selected for each day based on the collected
data. Taking IDS-1 as an example, the selected algorithm is SVM (LibSVM), DT (J48), DT (J48), DT (J48), and KNN (IBK) for respective day. These
results present the effectiveness of our approach in a cloud environment.
In particular, Table 3 depicts an example of decision value regarding IDS-1. It is visible that such value can vary with each day, and only
the classifier with the best decision value could be selected. In Figure 3, we further compare the false alarm reduction rate when deploying
TABLE 2 Algorithm selection for different IDS nodes and days
in Experiment-1
